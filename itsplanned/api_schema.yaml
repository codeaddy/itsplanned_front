openapi: 3.0.0
info:
  title: ItsPlanned API
  version: 1.0.0
  description: API Server for ItsPlanned - A Collaborative Event Planning Application
  contact:
    name: ItsPlanned Support
    url: https://github.com/vl4ddos/itsplanned
    email: support@itsplanned.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080
    description: Development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Enter the token with the `Bearer: ` prefix, e.g. "Bearer abcde12345"

  schemas:
    APIResponse:
      type: object
      properties:
        error:
          type: string
          example: "Error message"
        message:
          type: string
          example: "Success message"
        data:
          type: object
          description: "Optional data payload"

    GoogleOAuthURLResponse:
      type: object
      properties:
        url:
          type: string
          example: "https://accounts.google.com/o/oauth2/auth?..."
          description: "Google OAuth authorization URL"

    GoogleOAuthCallbackResponse:
      type: object
      properties:
        access_token:
          type: string
          example: "ya29.a0AfB_byC..."
          description: "OAuth access token"
        refresh_token:
          type: string
          example: "1//04dK..."
          description: "OAuth refresh token for future token refreshes"
        expiry:
          type: string
          format: date-time
          example: "2024-03-16T15:04:05Z"
          description: "Token expiry timestamp"

    SaveOAuthTokenRequest:
      type: object
      required:
        - access_token
        - expiry
      properties:
        access_token:
          type: string
          example: "ya29.a0AfB_byC..."
          description: "OAuth access token"
        refresh_token:
          type: string
          example: "1//04dK..."
          description: "OAuth refresh token"
        expiry:
          type: string
          format: date-time
          example: "2024-03-16T15:04:05Z"
          description: "Token expiry timestamp"

    UserResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        email:
          type: string
          example: "user@example.com"
        display_name:
          type: string
          example: "John Doe"
        bio:
          type: string
          example: "Event planning enthusiast"
        avatar:
          type: string
          example: "https://example.com/avatar.jpg"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    RegisterRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          example: "user@example.com"
        password:
          type: string
          example: "securepassword123"

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          example: "user@example.com"
        password:
          type: string
          example: "securepassword123"

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIs..."

    RegisterDeviceTokenRequest:
      type: object
      required:
        - device_token
        - device_type
      properties:
        device_token:
          type: string
          example: "6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b"
        device_type:
          type: string
          example: "ios"
          description: "Type of device (ios, android, web)"

    EventResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        name:
          type: string
          example: "Birthday Party"
        description:
          type: string
          example: "Celebrating John's 30th birthday"
        event_date_time:
          type: string
          format: date-time
        initial_budget:
          type: number
          format: float
          example: 1000.00
        organizer_id:
          type: integer
          example: 1
        place:
          type: string
          example: "Central Park"

    CreateEventRequest:
      type: object
      required:
        - name
        - event_date_time
      properties:
        name:
          type: string
          example: "Birthday Party"
        description:
          type: string
          example: "Celebrating John's 30th birthday"
        event_date_time:
          type: string
          format: date-time
          example: "2024-04-01T18:00:00Z"
        initial_budget:
          type: number
          format: float
          example: 1000.00
        place:
          type: string
          example: "Central Park"

    UpdateEventRequest:
      type: object
      properties:
        name:
          type: string
          example: "Birthday Party"
        description:
          type: string
          example: "Celebrating John's 30th birthday"
        event_date_time:
          type: string
          format: date-time
          example: "2024-04-01T18:00:00Z"
        budget:
          type: number
          format: float
          example: 1500.00
        place:
          type: string
          example: "Central Park"

    TaskResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: "Buy decorations"
        description:
          type: string
          example: "Purchase party decorations from the store"
        budget:
          type: number
          format: float
          example: 50.00
        points:
          type: integer
          example: 10
        event_id:
          type: integer
          example: 1
        assigned_to:
          type: integer
          nullable: true
          example: 2
        assigned_to_name:
          type: string
          example: "John Doe"
        is_completed:
          type: boolean
          example: false

    CreateTaskRequest:
      type: object
      required:
        - title
        - event_id
        - points
      properties:
        title:
          type: string
          example: "Buy decorations"
        description:
          type: string
          example: "Purchase party decorations from the store"
        budget:
          type: number
          format: float
          example: 50.00
        points:
          type: integer
          example: 10
        event_id:
          type: integer
          example: 1
        assigned_to:
          type: integer
          example: 2

    UpdateTaskRequest:
      type: object
      properties:
        title:
          type: string
          example: "Buy party decorations"
        description:
          type: string
          example: "Purchase decorations from the party store"
        budget:
          type: number
          format: float
          example: 60.00
        points:
          type: integer
          example: 15

    EventBudgetResponse:
      type: object
      properties:
        initial_budget:
          type: number
          format: float
          example: 1000.00
        real_budget:
          type: number
          format: float
          example: 950.00
        difference:
          type: number
          format: float
          example: 50.00

    EventLeaderboardEntry:
      type: object
      properties:
        user_id:
          type: integer
          example: 1
        score:
          type: number
          format: float
          example: 85.5
        event_id:
          type: integer
          example: 1
        display_name:
          type: string
          example: "John Doe"

    EventLeaderboardResponse:
      type: object
      properties:
        leaderboard:
          type: array
          items:
            $ref: '#/components/schemas/EventLeaderboardEntry'

    EventParticipantsResponse:
      type: object
      properties:
        participants:
          type: array
          items:
            type: string
          example: ["John Doe", "Jane Smith"]

    FindBestTimeSlotsRequest:
      type: object
      required:
        - event_id
        - date
        - duration_mins
      properties:
        event_id:
          type: integer
          example: 1
        date:
          type: string
          example: "2024-04-01"
        duration_mins:
          type: integer
          example: 120
        start_time:
          type: string
          example: "08:00"
        end_time:
          type: string
          example: "22:00"

    TimeSlotSuggestion:
      type: object
      properties:
        slot:
          type: string
          example: "2024-04-01 18:00"
        busy_count:
          type: integer
          example: 2

    FindBestTimeSlotsResponse:
      type: object
      properties:
        suggestions:
          type: array
          items:
            $ref: '#/components/schemas/TimeSlotSuggestion'

    YandexGPTMessage:
      type: object
      properties:
        role:
          type: string
          enum: [system, user, assistant]
          example: "user"
        text:
          type: string
          example: "What theme would you suggest for a birthday party?"

    YandexGPTRequest:
      type: object
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/YandexGPTMessage'

    YandexGPTResponse:
      type: object
      properties:
        message:
          type: string
          example: "For a birthday party, I would suggest several themes..."

    ImportCalendarEventsResponse:
      type: object
      properties:
        message:
          type: string
          example: "Events imported successfully"

    TaskStatusEventResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        task_id:
          type: integer
          example: 5
        task_name:
          type: string
          example: "Buy decorations"
        old_status:
          type: string
          example: "unassigned"
        new_status:
          type: string
          example: "assigned"
        changed_by_id:
          type: integer
          example: 2
        changed_by_name:
          type: string
          example: "John Doe"
        is_read:
          type: boolean
          example: false
        event_time:
          type: string
          format: date-time
          example: "2024-03-16T12:00:00Z"

    TaskStatusEventsResponse:
      type: object
      properties:
        events:
          type: array
          items:
            $ref: '#/components/schemas/TaskStatusEventResponse'

    GenerateInviteLinkRequest:
      type: object
      required:
        - event_id
      properties:
        event_id:
          type: integer
          example: 1
          description: "ID of the event to generate an invite link for"
          
    GenerateInviteLinkResponse:
      type: object
      properties:
        invite_link:
          type: string
          example: "https://api.itsplanned.app/events/redirect/xyz123"
          description: "Generated invite link for sharing"
          
    JoinEventResponse:
      type: object
      properties:
        message:
          type: string
          example: "Successfully joined event"

paths:
  /register:
    post:
      tags:
        - auth
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'

  /login:
    post:
      tags:
        - auth
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'

  /password/reset-request:
    post:
      tags:
        - auth
      summary: Request password reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
      responses:
        '200':
          description: Password reset request successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'

  /password/reset:
    post:
      tags:
        - auth
      summary: Reset password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'

  /profile:
    get:
      tags:
        - profile
      summary: Get user profile
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
    put:
      tags:
        - profile
      summary: Update user profile
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'

  /logout:
    post:
      tags:
        - auth
      summary: Logout user
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successfully logged out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'

  /events:
    get:
      tags:
        - events
      summary: Get user's events
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Events retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/EventResponse'
    post:
      tags:
        - events
      summary: Create a new event
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEventRequest'
      responses:
        '200':
          description: Event created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/APIResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/EventResponse'

  /events/{id}:
    get:
      tags:
        - events
      summary: Get event details
      description: Get detailed information about a specific event
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the event
      responses:
        '200':
          description: Event details retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/APIResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/EventResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        '403':
          description: Forbidden - not a participant of the event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
    put:
      tags:
        - events
      summary: Update an event
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the event to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEventRequest'
      responses:
        '200':
          description: Event updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/APIResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/EventResponse'
        '403':
          description: Not authorized to update this event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        '500':
          description: Failed to update event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
    delete:
      tags:
        - events
      summary: Delete an event
      description: Delete an event and all associated data (tasks, event scores, participations, invitations)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the event to delete
      responses:
        '200':
          description: Event deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        '403':
          description: Forbidden - not the organizer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        '500':
          description: Failed to delete event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'

  /events/{id}/budget:
    get:
      tags:
        - events
      summary: Get event budget details
      description: Get the budget details for an event, including initial budget, real budget, and difference
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the event
      responses:
        '200':
          description: Budget details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventBudgetResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'

  /events/{id}/participants:
    get:
      tags:
        - events
      summary: Get event participants
      description: Get a list of display names of all participants in an event
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the event
      responses:
        '200':
          description: List of participants' display names
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventParticipantsResponse'
        '400':
          description: Invalid event ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        '403':
          description: Forbidden - not a participant of the event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'

  /events/{id}/leave:
    delete:
      tags:
        - invitations
      summary: Leave an event
      description: Allow a user to leave an event they are participating in
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the event to leave
      responses:
        '200':
          description: Successfully left event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        '400':
          description: Invalid event ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        '403':
          description: Cannot leave - you are the organizer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        '404':
          description: Not a participant or event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'

  /events/invite:
    post:
      tags:
        - invitations
      summary: Generate event invite link
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateInviteLinkRequest'
      responses:
        '200':
          description: Invite link generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerateInviteLinkResponse'

  /events/join/{invite_code}:
    get:
      tags:
        - invitations
      summary: Join event using invite link
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: invite_code
          required: false
          schema:
            type: string
          description: Invite code from path parameter
      responses:
        '200':
          description: Successfully joined event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JoinEventResponse'
        '400':
          description: Already a participant or missing invite code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        '404':
          description: Invalid invite link
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'

  /events/join:
    get:
      tags:
        - invitations
      summary: Join event using invite code from query parameter
      description: Used by mobile app after deeplink redirection
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: code
          required: true
          schema:
            type: string
          description: Invite code from query parameter
      responses:
        '200':
          description: Successfully joined event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JoinEventResponse'
        '400':
          description: Already a participant or missing invite code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        '404':
          description: Invalid invite link
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'

  /events/redirect/{invite_code}:
    get:
      tags:
        - invitations
      summary: Redirect to iOS app deeplink
      description: Redirects from web browser to iOS app deeplink for event joining
      parameters:
        - in: path
          name: invite_code
          required: true
          schema:
            type: string
          description: Invite code from the URL
      responses:
        '200':
          description: HTML page with redirection to deeplink
          content:
            text/html:
              schema:
                type: string
                example: "<!DOCTYPE html><html>...</html>"
        '404':
          description: Invalid invite link
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'

  /events/{id}/leaderboard:
    get:
      tags:
        - events
      summary: Get event leaderboard
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the event
      responses:
        '200':
          description: Leaderboard retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventLeaderboardResponse'

  /events/find_best_time_for_day:
    post:
      tags:
        - events
      summary: Find best time slots for an event
      description: Find the best available time slots for an event based on participants' schedules
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindBestTimeSlotsRequest'
      responses:
        '200':
          description: Time slots found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FindBestTimeSlotsResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        '404':
          description: Event not found or no participants
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'

  /tasks:
    get:
      tags:
        - tasks
      summary: Get all tasks for an event
      description: Get a list of all tasks associated with a specific event
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: event_id
          required: true
          schema:
            type: integer
          description: ID of the event
      responses:
        '200':
          description: List of tasks retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/APIResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/TaskResponse'
        '400':
          description: Invalid event ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        '403':
          description: Forbidden - not a participant of the event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
    post:
      tags:
        - tasks
      summary: Create a new task
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskRequest'
      responses:
        '200':
          description: Task created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/APIResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/TaskResponse'
        '400':
          description: Invalid payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        '500':
          description: Failed to create task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'

  /tasks/{id}:
    get:
      tags:
        - tasks
      summary: Get task details
      description: Get detailed information about a specific task
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the task
      responses:
        '200':
          description: Task details retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/APIResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/TaskResponse'
        '400':
          description: Invalid task ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        '403':
          description: Forbidden - not a participant of the event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
    put:
      tags:
        - tasks
      summary: Update task details
      description: Update details of an existing task
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTaskRequest'
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/APIResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/TaskResponse'
        '400':
          description: Invalid payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        '403':
          description: Forbidden - not a participant of the event or not the organizer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
    delete:
      tags:
        - tasks
      summary: Delete a task
      description: Delete a task and any associated task status events
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the task to delete
      responses:
        '200':
          description: Task deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        '403':
          description: Forbidden - not the event organizer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        '500':
          description: Failed to delete task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'

  /tasks/{id}/assign:
    put:
      tags:
        - tasks
      summary: Toggle task assignment
      description: Assign the authenticated user to an unassigned task or unassign if already assigned
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the task
      responses:
        '200':
          description: Task assignment toggled successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/APIResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/TaskResponse'
        '400':
          description: Task already assigned to another user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'

  /tasks/{id}/complete:
    put:
      tags:
        - tasks
      summary: Toggle task completion
      description: Mark a task as completed or uncompleted and update user scores accordingly
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the task
      responses:
        '200':
          description: Task completion toggled successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/APIResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/TaskResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        '403':
          description: Forbidden - not assigned to the task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'

  /ai/message:
    post:
      tags:
        - ai-assistant
      summary: Send message to Yandex GPT
      description: Proxy request to Yandex GPT API and return the response
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/YandexGPTRequest'
      responses:
        '200':
          description: Response from Yandex GPT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/YandexGPTResponse'
        '400':
          description: Invalid payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        '500':
          description: Failed to process message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'

  /task-status-events/unread:
    get:
      tags:
        - notifications
      summary: Get unread task status events
      description: Retrieve a list of unread task status events
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of unread task status events retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskStatusEventsResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'

  /auth/google:
    get:
      tags:
        - calendar
      summary: Get Google OAuth URL
      description: Get the URL for Google OAuth authorization
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: redirect_uri
          schema:
            type: string
          required: false
          description: "Custom redirect URI to override the default"
          example: "itsplanned://callback"
      responses:
        '200':
          description: OAuth URL generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleOAuthURLResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'

  /auth/google/callback:
    get:
      tags:
        - calendar
      summary: Google OAuth callback
      description: Handle the callback from Google OAuth and exchange code for tokens
      parameters:
        - in: query
          name: code
          required: true
          schema:
            type: string
          description: Authorization code from Google
        - in: query
          name: redirect_uri
          schema:
            type: string
          required: false
          description: "Custom redirect URI that matches the one used in the auth request"
          example: "itsplanned://callback"
        - in: query
          name: app_redirect
          schema:
            type: string
          required: false
          description: "Deeplink URI to redirect to after OAuth"
          example: "itsplanned://callback/auth"
      responses:
        '200':
          description: Tokens received successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleOAuthCallbackResponse'
        '302':
          description: Redirect to app with tokens
        '400':
          description: Authorization code not provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        '500':
          description: Failed to get access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'

  /auth/web-to-app:
    get:
      tags:
        - calendar
      summary: OAuth Web to App Redirect
      description: Redirects from web OAuth flow to mobile app via deeplink
      parameters:
        - in: query
          name: code
          required: true
          schema:
            type: string
          description: Authorization code from Google
        - in: query
          name: state
          schema:
            type: string
          required: false
          description: "State parameter for security"
      responses:
        '302':
          description: Redirect to app deeplink

  /auth/oauth/save:
    post:
      tags:
        - calendar
      summary: Save OAuth tokens
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaveOAuthTokenRequest'
      responses:
        '200':
          description: Token saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'

  /auth/oauth/delete:
    delete:
      tags:
        - calendar
      summary: Delete OAuth tokens
      description: Delete the OAuth tokens for the currently authenticated user
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Token deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        '404':
          description: Token not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        '500':
          description: Failed to delete token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'

  /calendar/import:
    get:
      tags:
        - calendar
      summary: Import Google Calendar events
      description: Import events from the user's Google Calendar for the next 4 weeks and save them to the database. This endpoint requires OAuth tokens to have been previously saved using the /auth/oauth/save endpoint.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Events imported successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportCalendarEventsResponse'
        '401':
          description: Unauthorized or no OAuth tokens found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        '500':
          description: Failed to import events (token decryption error, Google API error, etc.)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'

  /notifications/device-token:
    post:
      tags:
        - notifications
      summary: Register device token
      description: Register a device token for push notifications
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterDeviceTokenRequest'
      responses:
        '200':
          description: Device token registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        '400':
          description: Invalid payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        '500':
          description: Failed to register device token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'

tags:
  - name: auth
    description: User registration, login, and authentication
  - name: profile
    description: User profile management
  - name: events
    description: Event management and planning
  - name: tasks
    description: Task creation, assignment, and completion
  - name: calendar
    description: Google Calendar integration and time slot suggestions
  - name: ai-assistant
    description: AI Assistant and Yandex GPT integration
  - name: notifications
    description: Notification management and notification events 